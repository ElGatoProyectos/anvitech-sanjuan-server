// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  dni       String
  full_name String
  phone     String?
  email     String
  username  String
  password  String
  role      String
  enabled   Boolean
}

model Report {
  id            Int            @id @default(autoincrement())
  date_created  DateTime       @default(now())
  name          String
  state         String
  detailReports DetailReport[]
}

model DetailReport {
  id        Int @id @default(autoincrement())
  report_id Int

  tardanza               String
  falta                  String
  dia                    String
  fecha_reporte          DateTime
  dni                    String
  nombre                 String
  supervisor             String?
  sede                   String
  hora_entrada           String?
  hora_inicio            String?
  hora_inicio_refrigerio String?
  hora_fin_refrigerio    String?
  hora_salida            String?
  daily_license          String?
  reason_license         String?
  discount               Float?
  worker_status          String?
  extra_hours            String?  @default("n")

  report               Report                 @relation(fields: [report_id], references: [id])
  DetailReportIncident DetailReportIncident[]
  Incident             Incident?              @relation(fields: [incidentId], references: [id])
  incidentId           Int?
}

model Worker {
  id Int @id @default(autoincrement())

  full_name     String  @db.Text
  dni           String  @unique
  type_dni      String?
  type_contract String?
  department    String
  position      String?
  supervisor    String?
  coordinator   String?
  management    String?
  company       String?
  company_ruc   String?

  hire_date        DateTime?
  termination_date DateTime?
  reason           String?
  enabled          String?       @default("si")
  schedule         Schedule[]
  Vacation         Vacation[]
  Permissions      Permissions[]
  Licence          Licence[]
  MedicalRest      MedicalRest[]
}

model TypeTermination {
  id    Int    @id @default(autoincrement())
  title String
}

model Schedule {
  id        Int     @id @default(autoincrement())
  worker_id Int     @unique
  lunes     String //08:00-17:00 -> de esta forma separamos la informacion y guardamos como string
  martes    String
  miercoles String
  jueves    String
  viernes   String
  sabado    String
  domingo   String
  comments  String?
  type      String?
  worker    Worker  @relation(fields: [worker_id], references: [id])
}

model TypeSchedule {
  id        Int    @id @default(autoincrement())
  name      String @unique
  lunes     String
  martes    String
  miercoles String
  jueves    String
  viernes   String
  sabado    String
}

model Vacation {
  id         Int      @id @default(autoincrement())
  worker_id  Int
  start_date DateTime
  end_date   DateTime
  reason     String?
  worker     Worker   @relation(fields: [worker_id], references: [id])
}

model Permissions {
  id         Int      @id @default(autoincrement())
  worker_id  Int
  start_date DateTime
  end_date   DateTime
  reason     String?
  worker     Worker   @relation(fields: [worker_id], references: [id])
}

model Incident {
  id                   Int                    @id @default(autoincrement())
  date                 DateTime?
  title                String
  description          String
  detailReports        DetailReport[]
  DetailReportIncident DetailReportIncident[]
}

model Licence {
  id         Int      @id @default(autoincrement())
  Worker     Worker?  @relation(fields: [worker_id], references: [id])
  worker_id  Int?
  start_date DateTime
  end_date   DateTime
  reason     String?
}

model MedicalRest {
  id         Int      @id @default(autoincrement())
  Worker     Worker?  @relation(fields: [worker_id], references: [id])
  worker_id  Int?
  start_date DateTime
  end_date   DateTime
  reason     String?
}

model DetailReportIncident {
  id               Int          @id @default(autoincrement())
  created_date     DateTime     @default(now())
  detail_report_id Int
  incident_id      Int
  incident         Incident     @relation(fields: [incident_id], references: [id])
  detailReport     DetailReport @relation(fields: [detail_report_id], references: [id])
}
